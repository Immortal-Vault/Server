// <auto-generated />
using System;
using ImmortalVault_Server;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ImmortalVault_Server.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250213152705_AddInactiveMinutes")]
    partial class AddInactiveMinutes
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ImmortalVault_Server.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Mfa")
                        .HasColumnType("text");

                    b.Property<string>("MfaRecoveryCodes")
                        .HasColumnType("json");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ImmortalVault_Server.Models.UserSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("InactiveMinutes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(10);

                    b.Property<bool>("Is12HoursFormat")
                        .HasColumnType("boolean");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("UsersSettings");
                });

            modelBuilder.Entity("ImmortalVault_Server.Models.UserTokens", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("TokenExpiryTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UsersTokens");
                });

            modelBuilder.Entity("ImmortalVault_Server.Models.User", b =>
                {
                    b.HasOne("ImmortalVault_Server.Models.UserSettings", null)
                        .WithOne()
                        .HasForeignKey("ImmortalVault_Server.Models.User", "Id")
                        .HasPrincipalKey("ImmortalVault_Server.Models.UserSettings", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ImmortalVault_Server.Models.UserSettings", b =>
                {
                    b.HasOne("ImmortalVault_Server.Models.User", null)
                        .WithOne("UserSettings")
                        .HasForeignKey("ImmortalVault_Server.Models.UserSettings", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ImmortalVault_Server.Models.UserTokens", b =>
                {
                    b.HasOne("ImmortalVault_Server.Models.User", null)
                        .WithOne("UserTokens")
                        .HasForeignKey("ImmortalVault_Server.Models.UserTokens", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ImmortalVault_Server.Models.User", b =>
                {
                    b.Navigation("UserSettings")
                        .IsRequired();

                    b.Navigation("UserTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
